If you thought Touhou 6 remapping was hard, prepare yourself! th123 only uses dinput8 to check controller or keyboard! And it uses CoCreateInstance!

Q: Why not use dinput8.dll replacement?
A: Doesn't work with Steam input remapping.

The location where DInput writes its data is not static. But the location of where it gets written is kept in eax at instruction A1C7 (mov ecx,[eax]).

structure is 4 bytes for control stick X axis, 4 bytes for control stick Y axis, 4 bytes of nothing, 8 bytes for control stick x and y axis, 8 more bytes of nothing, then 4 bytes for the DPad.
^ That's an offset of 20, or 32 in dec

control stick X and Y axis: 4 bytes signed, min -1000, max 1000

DPad:
no direction = -1 (FFFFFF)
up = 0 (000000)
right = 9000 (28 23 00 00)
down = 18000 (50 46 00 00)
left = 27000 (78 69 00 00)

upleft = 31500 (0C 7B 00 00)
upright = 4500 (94 11 00 00)
downright = 13500 (BC 34 00 00)
downleft = 22500 (E4 57 00 00)

As you can see, only 2 bytes are used and actually only 1 byte is needed.

Controller checking is done at A1C7.
After calling function to retrieve from location of eax, ecx is compared to 0, if not 0 then compare if ecx is less than -500, 
if less than 500 subtract from location of where the controller X Axis info is stored for the game, if greater than -500 then
add to it.
Y Axis data is also stored but th123 doesn't use it.

Current function:

.text:0040A1C7                 mov     ecx, [eax]      ; move x-axis data into ecx
.text:0040A1C9                 or      edx, -1
.text:0040A1CC                 cmp     ecx, 0FFFFFE0Ch ; -500
.text:0040A1D2                 jge     short loc_40A1E1 ; jump if greater or equal to -500
.text:0040A1D4                 cmp     [esi+38h], edi  ; =/= 0
.text:0040A1D7                 jle     short SubControlXAxis
.text:0040A1D9                 mov     [esi+38h], edi
.text:0040A1DC
.text:0040A1DC SubControlXAxis:                        ; CODE XREF: sub_40A1A0+37↑j
.text:0040A1DC                 add     [esi+38h], edx
.text:0040A1DF                 jmp     short loc_40A1FA
.text:0040A1E1 ; ---------------------------------------------------------------------------
.text:0040A1E1
.text:0040A1E1 loc_40A1E1:                             ; CODE XREF: sub_40A1A0+32↑j
.text:0040A1E1                 cmp     ecx, 500
.text:0040A1E7                 jle     short ClrControlXAxis
.text:0040A1E9                 cmp     [esi+38h], edi  ; =/= 0
.text:0040A1EC                 jge     short AddControlXAxis
.text:0040A1EE
.text:0040A1EE ClrControlXAxis2:
.text:0040A1EE                 mov     [esi+38h], edi
.text:0040A1F1
.text:0040A1F1 AddControlXAxis:                        ; CODE XREF: sub_40A1A0+4C↑j
.text:0040A1F1                 add     dword ptr [esi+38h], 1
.text:0040A1F5                 jmp     short loc_40A1FA
.text:0040A1F7 ; ---------------------------------------------------------------------------
.text:0040A1F7
.text:0040A1F7 ClrControlXAxis:                        ; CODE XREF: sub_40A1A0+47↑j
.text:0040A1F7                 mov     [esi+38h], edi
.text:0040A1FA
.text:0040A1FA loc_40A1FA:                             ; CODE XREF: sub_40A1A0+3F↑j
.text:0040A1FA                                         ; sub_40A1A0+55↑j
.text:0040A1FA                 mov     ecx, [eax+4]    ; move y-axis data into ecx
.text:0040A1FD                 cmp     ecx, 0FFFFFE0Ch ; -500
.text:0040A203                 jge     short loc_40A212
.text:0040A205                 cmp     [esi+3Ch], edi
.text:0040A208                 jle     short SubControlYAxis
.text:0040A20A                 mov     [esi+3Ch], edi
.text:0040A20D
.text:0040A20D SubControlYAxis:                        ; CODE XREF: sub_40A1A0+68↑j
.text:0040A20D                 add     [esi+3Ch], edx
.text:0040A210                 jmp     short loc_40A22B
.text:0040A212 ; ---------------------------------------------------------------------------
.text:0040A212
.text:0040A212 loc_40A212:                             ; CODE XREF: sub_40A1A0+63↑j
.text:0040A212                 cmp     ecx, 500
.text:0040A218                 jle     short ClrControlYAxis
.text:0040A21A                 cmp     [esi+3Ch], edi
.text:0040A21D                 jge     short AddControlYAxis
.text:0040A21F                 mov     [esi+3Ch], edi
.text:0040A222
.text:0040A222 AddControlYAxis:                        ; CODE XREF: sub_40A1A0+7D↑j
.text:0040A222                 add     dword ptr [esi+3Ch], 1
.text:0040A226                 jmp     short loc_40A22B
.text:0040A228 ; ---------------------------------------------------------------------------
.text:0040A228
.text:0040A228 ClrControlYAxis:                        ; CODE XREF: sub_40A1A0+78↑j
.text:0040A228                 mov     [esi+3Ch], edi

^ 5F, or 95 opcodes large according to IDA

add		[esi+3Ch], edx				<- 01 56 38, only 3 bytes!
add     dword ptr [esi+38h], 1		<- 83 46 38 01, 4 bytes

Maybe something can be done?

up = 0 (000000)
upright = 4500 (94 11 00 00)
right = 9000 (28 23 00 00)
down = 18000 (50 46 00 00)
downright = 13500 (BC 34 00 00)
downleft = 22500 (E4 57 00 00)
left = 27000 (78 69 00 00)
upleft = 31500 (0C 7B 00 00)
no direction = -1 (FFFFFF)

Skip jumping to end after modifying x and y axis because more bytes are needed.
Also jump a lot because we need to save on bytes..

new function should be:
8b 48 20	mov		ecx, [eax+20]			;20 = dpad offset (32 in dec)
83 CA FF	or		edx, -1

39 f9		cmp		ecx,edi 				;optimization, edi is 0, takes less bytes than checking 0.
7D 08		jge		short checkUpleft		;if not 0 or -1, skip to checkUpleft
89 7E 38	mov     [esi+38h], edi			;clear y axis for 0 or -1
75 38		jnz		short down+7			;if -1 jump to the clear x-axis instruction
EB 08		jmp		short upLeft+3			;jump to subtract from y axis instruction, only 2 bytes.

checkUpleft:
80 f9 0C	cmp		cl, 0x0C					;upleft
75 06		jne		short checkLeft
upLeft:
01 56 38	add		[esi+38], edx			;subtract from x axis
01 56 3C	add     [esi+3C], edx			;subtract from y axis

checkLeft:
80 F9 78	cmp 	cl, 0x78				;left
75 06		jne 	short checkDownLeft
left:
01 56 3C	add		[esi+3C], edx			;subtract from x axis
89 7E 38	mov     [esi+38], edi			;clear y axis

checkDownLeft:
80 F9 E4	cmp 	cl, 0xE4				;downleft
75 05		jne 	short checkDownright
downleft:
01 56 38	add		[esi+38], edx			;subtract from x axis
EB 09		jmp		short downright+4		;jump to 'add to y axis'

checkDownright:
80 F9 BC	cmp 	cl, 0xBC
75 08		jne		short checkDown
downright:
83 46 38 01	add     dword ptr [esi+38], 1	;add to x axis
83 46 3C 01	add		dword ptr [esi+3C], 1	;add to y axis

checkDown:
80 F9 50	cmp		cl, 0x50
75 07		jne		short checkRight
down:
83 46 3C 01	add		dword ptr [esi+3C], 1	;add to y axis
89 7E 38	mov     [esi+38], edi			;clear x axis

checkRight:
80 F9 28	cmp		cl, 0x28
75 05		jne		short checkUpright

right:
89 7E 38	mov     [esi+38], edi			;clear y axis
EB 08		jmp		0x06					;jump to 'add to x axis'

checkUpright:
80 f9 94	cmp		cl, 0x94
75 07		jne		short end				;'end' meaning past upright..

Upright:
01 56 3C	add		[esi+3C], edx			;subtract from y axis
83 46 38 01	add     dword ptr [esi+38], 1	;add to x axis

Somehow these instructions are affecting the eax register so it's crashing...
